% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genotypeFuncs.R
\name{simulateGeno}
\alias{simulateGeno}
\alias{simulateHap}
\alias{simulateGeneHap}
\title{Simulate genotypes based on predefined frequencies}
\usage{
simulateGeno(
  N,
  NrSNP = NULL,
  SNPfrequency = NULL,
  sampleID = "ID_",
  snpID = "SNP_",
  is.standardise = FALSE,
  verbose = TRUE,
  ...
)

simulateHap(N, NrSNP, Haplotype = NULL, is.standardise = FALSE, ...)

simulateGeneHap(
  N,
  Haplotype = NULL,
  SubRegion.Length = -1,
  is.standardise = FALSE,
  ...
)
}
\arguments{
\item{N}{Number of samples for which to simulate bi-allelic genotypes.}

\item{NrSNP}{Number of SNPs to simulate.}

\item{SNPfrequency}{Vector of allele frequencies [double] from which to
sample.}

\item{sampleID}{Prefix [string] for naming samples (will be followed by
sample number from 1 to N when constructing id_samples).}

\item{snpID}{Prefix [string] for naming SNPs (will be followed by SNP number
from 1 to NrSNP when constructing id_snps).}

\item{is.standardise}{Logical value. If TRUE, standardize the genotype matrix.
Default is FALSE.}

\item{verbose}{[boolean] If TRUE, progress info is printed to standard out.}

\item{\dots}{Arguments passed to the internal function.}

\item{Haplotype}{Haplotype pool (two objects, first is the hoplotypes,
second object is the SNP information)}

\item{SubRegion.Length}{A value of the length of subregions.
If SubRegion.Length=-1 (default), the length of the subregion
will be the same as the length of the whole region, so there will
no random selection of subregions. This parameter is used in the gene-based
assocaition.}
}
\value{
Named list with [N x NrSNP] matrix of simulated genotypes
  (genotypes), their SNP frequencies (freq), a vector of sample IDs
  (id_samples) and a vector of SNP IDs (id_snps).
}
\description{
\code{simulateGeno()} Simulate genotypes in a region based on given minor allele frequency
}
\examples{
data(frequencies)
snp <- simulateGeno(N=10, NrSNP=10)
gene <- simulateHap(N=100, NrSNP=20)
gene <- simulateGeneHap(N=100)
}
